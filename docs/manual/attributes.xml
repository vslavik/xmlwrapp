<chapter id="attr"><title>Node Attributes</title>
    <!--=================================================================================-->
    <para>
	It is possible for every element type node in an XML node tree to have attributes. Attributes are nothing more than a
	collection of name value pairs. In xmlwrapp, attributes are accessed using the <classname>xml::attributes</classname>
	class. This chapter will show you how to work with objects of this class.
    </para>
    <!--=================================================================================-->
    <section id="attr-it"><title>Accessing Individual Attributes</title>
	<!--=================================================================================-->
	<para>
	    The <classname>xml::attributes</classname> class is a container of node attributes. It would be pretty useless if
	    there was no way to access the individual attributes inside of it. Iterators come to the rescue again.  Just like the
	    other xmlwrapp classes, iterators are used to access the attributes stored inside the
	    <classname>xml::attributes</classname> class.
	</para>
	<!--=================================================================================-->
	<section id="attr-it-it"><title>Attribute Iterators</title>
	    <para>
		The <classname>xml::attributes::iterator</classname> and <classname>xml::attributes::const_iterator</classname>
		classes point to a <classname>xml::attributes::attr</classname> object. This object is what gives you access to
		the name and value of a given attribute. In future versions of xmlwrapp, you will be able to use this class to
		access the attribute's namespace.
	    </para>

	    <example id="attr-it-attr-ex"><title>Using Attribute Iterators</title>
		<screen>
<![CDATA[
xml::attributes attrs;

...

xml::attributes::iterator i(attrs.begin());

if (i != attrs.end()) {
    std::cout << " name: " << i->get_name() << "\n";
    std::cout << "value: " << i->get_value() << "\n";
}
]]>
		</screen>
	    </example>
	</section>
	<!--=================================================================================-->
	<section id="attr-it-begin"><title>Begin and End</title>
	    <para>
		If you just wanted to iterate through the attributes, you can use the <function>xml::attributes::begin</function>
		and the <function>xml::attributes::end</function> member functions. They both return either a
		<classname>xml::attributes::iterator</classname> or <classname>xml::attributes::const_iterator</classname> object
		depending on whether the <classname>xml::attributes</classname> object is const or not.
	    </para>
	</section>
	<!--=================================================================================-->
	<section id="attr-it-find"><title>Finding Attributes</title>
	    <para>
		When you want to locate an attribute with a given name, you can use the <function>xml::attributes::find</function>
		member function. It will return an iterator that points to the found attribute or an iterator that is equal to the
		iterators that the <function>xml::attributes::end</function> function returns.
	    </para>

	    <para>
		There is a small difference between the <function>xml::attributes::find</function> function and just using the
		<function>xml::attributes::begin</function> function to iterate over the attributes. If the attributes belong to a
		<classname>xml::document</classname> object that has been validated, the
		<function>xml::attributes::find</function> function may return an attribute that was not given in the XML document
		but contains a default value in the DTD.
	    </para>

	    <para>
		If you are asking the <function>xml::attributes::find</function> function to find an attribute that has a default
		value, but was present in the XML document, the document version of the attribute is returned.
	    </para>
	</section>
	<!--=================================================================================-->
    </section>
    <!--=================================================================================-->
    <section id="attr-add"><title>Adding and Replacing Attributes</title>
	<para>
	    Since only one attribute with a given name can exist in a node at any one time, the same function can be used to both
	    add and replace attributes. When attempting to add an attribute who has the same name as another attribute in the
	    container, the old attribute will be removed before the new one is inserted.
	</para>

	<para>
	    To add or replace an attribute, you can use the <function>xml::attributes::insert</function> member function. It takes
	    the name and value for the attribute to insert.
	</para>
    </section>
    <!--=================================================================================-->
    <section id="attr-remove"><title>Removing Attributes</title>
	<para>
	    There are two ways to remove an attribute from a <classname>xml::attributes</classname> object. Both involve a call to
	    the <function>xml::attributes::erase</function> member function. You can remove an attribute by name, or using an
	    iterator that points to the attribute you wish to remove.
	</para>
    </section>
    <!--=================================================================================-->
</chapter>
<!--
    vim:ft=docbk:tw=130
-->

